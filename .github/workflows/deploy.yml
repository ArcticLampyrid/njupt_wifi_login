name: Deploy

on:
  push:
    branches: 
      - main
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches: 
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate-release-notes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: latest
      - run: npx changelogithub ${{ github.event_name == 'push' && github.ref_type == 'tag' && '--draft' || '--dry'}}
        env:
          GITHUB_TOKEN: ${{ github.token }}

  deploy-win:
    strategy:
      fail-fast: false
      matrix:
        release_name:
          - "win-x86_64"
          - "win-aarch64"
        include:
          - release_name: "win-x86_64"
            rust_target: "x86_64-pc-windows-msvc"
          - release_name: "win-aarch64"
            rust_target: "aarch64-pc-windows-msvc"
    runs-on: windows-latest
    needs: 
    - generate-release-notes
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.rust_target }}
    - name: Build (Release)
      shell: pwsh
      run: cargo build --release --target ${{ matrix.rust_target }} --verbose
    - name: Package
      shell: pwsh
      run: |
        $version = git describe --tags --dirty --always
        $unpacked_dir = "unpacked/njupt_wifi_login"
        New-Item -ItemType Directory -Force -Path $unpacked_dir
        Copy-Item -Path "target/${{ matrix.rust_target }}/release/*.exe" -Destination $unpacked_dir
        New-Item -ItemType Directory -Force -Path "release"
        7z a -mx=9 -ms=on "release\njupt_wifi_login-${version}-${{ matrix.release_name }}.7z" "unpacked\*"
    - name: Release (GitHub)
      if: github.event_name == 'push' && github.ref_type == 'tag'
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        draft: true
        omitBody: true
        artifacts: "release/*"
  
  deploy-linux:
    strategy:
      fail-fast: false
      matrix:
        release_name:
          - "linux-x86_64"
          - "linux-aarch64"
          - "linux-riscv64"
        include:
          - release_name: "linux-x86_64"
            rust_target: "x86_64-unknown-linux-gnu"
            dpkg_arch: "amd64"
            dependencies: "libgtk-3-dev"
          - release_name: "linux-aarch64"
            rust_target: "aarch64-unknown-linux-gnu"
            dpkg_arch: "arm64"
            pkgconf_arch: "aarch64-linux-gnu"
            dependencies: "crossbuild-essential-arm64 libgtk-3-dev:arm64"
            toolchain_name: "aarch64-linux-gnu"
          - release_name: "linux-riscv64"
            rust_target: "riscv64gc-unknown-linux-gnu"
            dpkg_arch: "riscv64"
            pkgconf_arch: "riscv64-linux-gnu"
            dependencies: "crossbuild-essential-riscv64 libgtk-3-dev:riscv64"
            toolchain_name: "riscv64-linux-gnu"
    runs-on: ubuntu-latest
    needs: 
    - generate-release-notes
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.rust_target }}
    - name: Install libgtk
      run: | 
        . /etc/lsb-release
        dpkg_arch="${{ matrix.dpkg_arch }}"
        pkgconf_arch="${{ matrix.pkgconf_arch }}"
        toolchain_name="${{ matrix.toolchain_name }}"
        rust_target="${{ matrix.rust_target }}"
        if [ -n "$pkgconf_arch" ]; then
          echo "PKG_CONFIG_PATH=/usr/lib/$pkgconf_arch/pkgconfig:/usr/share/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_LIBDIR=/usr/lib/$pkgconf_arch" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/" >> $GITHUB_ENV
        fi
        if [ -n "$toolchain_name" ]; then
          echo "[target.${rust_target}]" >> ~/.cargo/config
          echo "linker = \"${toolchain_name}-gcc\"" >> ~/.cargo/config
          echo "ar = \"${toolchain_name}-ar\"" >> ~/.cargo/config
        fi
        if [ "$dpkg_arch" == "arm64" ] || [ "$dpkg_arch" == "riscv64" ]; then
          echo "deb [arch=$dpkg_arch] http://ports.ubuntu.com/ubuntu-ports $DISTRIB_CODENAME main restricted" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=$dpkg_arch] http://ports.ubuntu.com/ubuntu-ports $DISTRIB_CODENAME-updates main restricted" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=$dpkg_arch] http://ports.ubuntu.com/ubuntu-ports $DISTRIB_CODENAME universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=$dpkg_arch] http://ports.ubuntu.com/ubuntu-ports $DISTRIB_CODENAME-updates universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=$dpkg_arch] http://ports.ubuntu.com/ubuntu-ports $DISTRIB_CODENAME multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=$dpkg_arch] http://ports.ubuntu.com/ubuntu-ports $DISTRIB_CODENAME-updates multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=$dpkg_arch] http://ports.ubuntu.com/ubuntu-ports $DISTRIB_CODENAME-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=$dpkg_arch] http://ports.ubuntu.com/ubuntu-ports $DISTRIB_CODENAME-security main restricted" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=$dpkg_arch] http://ports.ubuntu.com/ubuntu-ports $DISTRIB_CODENAME-security universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=$dpkg_arch] http://ports.ubuntu.com/ubuntu-ports $DISTRIB_CODENAME-security multiverse" | sudo tee -a /etc/apt/sources.list
        fi
        sudo apt-get update
        sudo dpkg --add-architecture $dpkg_arch
        sudo apt-get install -y ${{ matrix.dependencies }}
    - name: Build (Release)
      run: cargo build --release --target ${{ matrix.rust_target }} --verbose
    - name: Package
      run: |
        rust_target='${{ matrix.rust_target }}'
        version=$(git describe --tags --dirty --always)
        unpacked_dir=unpacked/njupt_wifi_login
        mkdir -p $unpacked_dir
        cp target/$rust_target/release/njupt_wifi_login $unpacked_dir
        cp target/$rust_target/release/njupt_wifi_login_configurator $unpacked_dir
        mkdir -p release
        tar -czf release/njupt_wifi_login-${version}-${{ matrix.release_name }}.tar.gz -C unpacked .
    - name: Release (GitHub)
      if: github.event_name == 'push' && github.ref_type == 'tag'
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        draft: true
        omitBody: true
        artifacts: "release/*"

  deploy-linux-musl:
    strategy:
      fail-fast: false
      matrix:
        release_name:
          - "linux-x86_64-musl"
          - "linux-aarch64-musl"
          - "linux-riscv64-musl"
        include:
          - release_name: "linux-x86_64-musl"
            image: "rust:alpine"
            arch: 'amd64'
          - release_name: "linux-aarch64-musl"
            image: "rust:alpine"
            arch: 'arm64'
          - release_name: "linux-riscv64-musl"
            image: "riscv64/alpine"
            arch: 'riscv64'
    runs-on: ubuntu-latest
    needs: 
    - generate-release-notes
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        if: matrix.arch != 'amd64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.arch }}
      - name: Build in Docker
        run: |
          cat << EOF | docker run -i --rm -v ${{ github.workspace }}:/workspace -w /workspace --platform 'linux/${{ matrix.arch }}' -e CARGO_TERM_COLOR=always ${{ matrix.image }} sh -e
            apk add --no-cache ca-certificates git musl-dev gtk+3.0-dev
            if ! command -v rustc > /dev/null; then
              echo "No Rust toolchain found, installing..."
              apk add --no-cache gcc rust cargo
            fi
            export RUSTFLAGS='-C target-feature=-crt-static'
            cargo build --release --verbose
          EOF
      - name: Package
        run: |
          version=$(git describe --tags --dirty --always)
          unpacked_dir=unpacked/njupt_wifi_login
          mkdir -p $unpacked_dir
          cp target/release/njupt_wifi_login $unpacked_dir
          cp target/release/njupt_wifi_login_configurator $unpacked_dir
          mkdir -p release
          tar -czf release/njupt_wifi_login-${version}-${{ matrix.release_name }}.tar.gz -C unpacked .
      - name: Release (GitHub)
        if: github.event_name == 'push' && github.ref_type == 'tag'
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          draft: true
          omitBody: true
          artifacts: "release/*"

  publish-release:
    if: github.event_name == 'push' && github.ref_type == 'tag'
    runs-on: ubuntu-latest
    needs:
    - deploy-win
    - deploy-linux
    - deploy-linux-musl
    steps:
      - name: Release (GitHub)
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          draft: false
          omitBody: true
